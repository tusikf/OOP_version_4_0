Крестьянин, Разбойник, Снайпер, Колдун, Копейщик, Арбалетчик, Монах
Для каждого определит 8 полей данных(здоровье, сила итд) 3-4 поля поведения(методов атаковать, вылечить итд)

Энумератор

public enum Magic {
    fireBall(10, 12), heal(2, -2), magDef(5, 2);

    private int mana;
    private int atc;
    Magic(int i, int i1) {
        mana = i;
        atc = i1;
    }
    public int getMana() {return mana;}
    public int getAtc() {return atc;}

    @Override
    public String toString() {
        return ": требует маны:"+mana+" повреждение:"+atc;
    }
}

Добавить в проект класс, предназначенный для хранения координат. Добавить в абстрактный класс поле, экземпляр класс координат. Пробросить координаты через конструкторы наследников так, чтобы создавая объекты вы передавали в параметрах имя и координаты. Написать алгоритм заполнения команд. Кроме имён каждый персонаж должен иметь координаты. Одна команда находится с левой стороны другая с правой(у=0 и у=9). В класс лучников добавить метод поиск ближайшего противника. Алгоритм расчёта расстояний реализовать в классе координат.

private static String getName(){
        return String.valueOf(Names.values()[new Random().nextInt(Names.values().length-1)]);
    }

public enum Names {
    Ivan, Olga, Kiril, Антон, Сергей, Светлана;
}


Анастасия Чернорицкая
public class lesson2 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        ArrayList<Person> team1 = new ArrayList<>();
        ArrayList<Person> team2 = new ArrayList<>();
        for (int i = 0; i < 10; i++) {

            switch (new Random().nextInt(2)) {
                case 0:
                    team1.add(new Snipper(getName(), i, 0));
                    break;
                case 1:
                    team1.add(new Witch(getName(), i, 0));
                    break;
            }
            switch (new Random().nextInt(2)) {
                case 0:
                    team2.add(new Snipper(getName(), i, 9));
                    break;
                case 1:
                    team2.add(new Witch(getName(), i, 9));
                    break;
            }

21:59
public class Place {
    int X, Y;
    Place(int x, int y){
        X = x;
        Y = y;
    }
    int getX(){
        return X;
    }
    int getY(){
        return Y;
    }
}

Добавить в файл интерфейса метод void step() это будет основной метод взаимодействыия с объектами. Добавить интерфейс в базовый абстрактный класс. Реализовать этот метод во всех классах наследниках. Для начала просто заглушкой.

Доработать классы лучников. Лучник должен во первых проверить жив ли он и есть ли у него стрелы, если нет то завершить метод. Если всё да, то найти ближайшего противника и выстрелить по немы и, соответственно потратить одну стрелу. Реализовать весь функционал лучников в методе step().

Добавить в абстрактный класс int поле инициатива. В классах наследников инициализировать это поле. Крестьянин = 0, маги=1, пехота=2, лучники=3. В мэйне сделать так, чтобы сначала делали ход персонажи с наивысшей инициативой из обеих комманд а с наименьшей в конце.


Алексей Гаврилов
https://github.com/AlexeiGavrilov/javaOop/tree/master/src/seminar1

Реализовать метод step() пехоты. Первое проверяем живы ли мы, потом ищем ближайшего противника. Если противник в соседней клетке, наносим повреждение. Иначе двигаемся в сторну противника. Алгоритм движения, если dX>dY двигаемся по x иначе по y. dX и dY (разница наших координат и ближайшего противника) знаковые, от знака зависит направление. По своим не ходить!

Степ крестьян. Один крестьянин может отдать одну стрелу одному лучнику за один ход.

20:19
маг лечит за один ход одного самого больного среди своих